" Plugins via Vim-Plug
call plug#begin()
Plug 'tpope/vim-sensible'
Plug 'tmhedberg/matchit'
Plug 'vim-scripts/python_match.vim'
Plug 'majutsushi/tagbar'
Plug 'haya14busa/vim-asterisk'
Plug 'flazz/vim-colorschemes'
Plug 'tpope/vim-fugitive'
Plug 'mhinz/vim-hugefile'
Plug 'tpope/vim-jdaddy'
Plug 'tpope/vim-surround'
Plug 'vim-scripts/DirDiff.vim'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'kana/vim-textobj-user'
Plug 'bps/vim-textobj-python'
Plug 'kana/vim-textobj-diff'
Plug 'derekwyatt/vim-fswitch'
Plug 'tpope/vim-eunuch'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'git@gitlab.aristanetworks.com:jeff/vim-alog.git'
Plug 'git@gitlab.aristanetworks.com:the_third_man/arvim.git'
Plug 'itchyny/lightline.vim'
Plug 'junegunn/gv.vim'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
call plug#end()

" Options for editing
set nocompatible
set shiftwidth=3
set tabstop=3
" No, actually even for Python (thanks Neovim)
autocmd FileType python setlocal shiftwidth=3
autocmd FileType python setlocal tabstop=3
set linebreak
set textwidth=85
set cindent
set expandtab
set nospell
set virtualedit=all
set history=5000

" Mouse support with tmux
set mouse=a
if &term =~ '^screen'
   " tmux knows the extended mouse mode
   set ttymouse=xterm2
endif

" Make splits appear as expected
set splitbelow
set splitright

" Prevent key pauses
set timeout
set timeoutlen=1000

" Options for setting the bottom 2 lines
set showmode

" Show non-printing characters
set list
set listchars=tab:»\ ,trail:·

" UI stuff
set background=light
function! SetColours()
   try
      colorscheme solarized
   catch /^Vim\%((\a\+)\)\=:E185/
      colorscheme desert
   endtry
endfunction
call SetColours()

set nocursorline
set visualbell
set ignorecase
set smartcase
set guioptions=aeir
set hidden
set hlsearch
set incsearch
set nowrapscan
set showcmd
set lazyredraw
set wildmenu
set wildmode=list:longest
set tags=tags;/
set path=**
set numberwidth=1

" Highlight cursor line only in current window
augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup END

if has("gui_running")
  if has("gui_win32")
    set guifont=Lucida_Console:h10:cDEFAULT
  endif
endif

" Options for folding
set foldmethod=indent           "fdm:   fold by the indentation by default
set nofoldenable                "nofen: don't fold by default

" Options for backup files
set nobackup
set nowritebackup
if has('unix')
   set directory=/tmp
else
   set directory=$TEMP
endif

" Use outer host (which is running tmux) for shared clipboard
let g:clipboard = {
    \   'name': 'Shared Clipboard',
    \   'copy': {
    \      '+': 'ssh us167 ~/bin/tmux load-buffer -',
    \      '*': 'ssh us167 ~/bin/tmux load-buffer -',
    \    },
    \   'paste': {
    \      '+': 'ssh us167 ~/bin/tmux save-buffer -',
    \      '*': 'ssh us167 ~/bin/tmux save-buffer -',
    \   },
    \   'cache_enabled': 1,
    \ }

" define a group `vimrc` and initialize.
augroup vimrc
   autocmd!
augroup END

" Options for vimdiff
set diffopt=filler,vertical
" Automatically diffupdate on write
autocmd vimrc BufWritePost * if &diff == 1 | diffupdate | endif

" Always move some windows to the bottom
autocmd vimrc FileType qf wincmd J
autocmd vimrc FileType gitcommit wincmd J

" Treat *.md files as markdown instead of Modula-2
autocmd vimrc BufNewFile,BufReadPost *.md set filetype=markdown
autocmd vimrc BufNewFile,BufReadPost *.md set textwidth=0

" Special textwidth gitcommit
autocmd vimrc FileType gitcommit setlocal textwidth=72

" Treat *.*tin files as C++
autocmd vimrc BufNewFile,BufReadPost *.*tin set filetype=cpp

" Mappings
let g:mapleader = "\<Space>"
map Y y$
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
nnoremap <silent><Leader>tc :tabclose<return>
nnoremap <silent><Leader>tn :tabnew<return>
nnoremap <silent><Leader>to :tabonly<return>
nnoremap <Leader>te :tabedit<space>
nnoremap <Leader>tm :tabmove<space>
nnoremap <silent><Leader>co :copen<return>
nnoremap <silent><Leader>cc :cclose<return>
nnoremap j gj
nnoremap k gk
noremap <silent><Leader>// :let @/ = ""<CR>
nnoremap <Leader>ms :mksession! ~/.vim_session<CR> " Quick write session
nnoremap <Leader>ls :source ~/.vim_session<CR>     " And load session
nnoremap <silent><Leader>\| :vsp<cr>
nnoremap <silent><Leader>- :sp<cr>
nnoremap <silent><Leader>= <C-w>=
nnoremap <silent><Leader>o :only<cr>
nnoremap <silent><Leader>c :close<cr>
nnoremap <silent><Leader>D :bp\|bd #<cr>
nnoremap <silent><Leader>P :set paste!<cr>
nnoremap <silent><Leader>C :call SetColours()<cr> " Fix colors when they get messed
nnoremap <silent><Leader>tt :terminal<cr>
nnoremap <silent><Leader>n :set number! relativenumber!<cr>

" Terminal
if has( "nvim" )
   let g:terminal_scrollback_buffer_size=100000
   "tnoremap <Esc><Esc> <C-\><C-n>
endif

" Highlight long lines (based on textwidth)
nnoremap <silent> <Leader>L
      \ :if exists('w:long_line_match') <Bar>
      \   silent! call matchdelete(w:long_line_match) <Bar>
      \   unlet w:long_line_match <Bar>
      \ elseif &textwidth > 0 <Bar>
      \   let w:long_line_match = matchadd('ErrorMsg', '\%>'.&tw.'v.\+', -1) <Bar>
      \ else <Bar>
      \   let w:long_line_match = matchadd('ErrorMsg', '\%>80v.\+', -1) <Bar>
      \ endif<CR>

" netrw settings
let g:netrw_localrmdir='rm -r'
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_altv = 1
let g:netrw_winsize = 0

" Tagbar plugin
map <Leader>tb :TagbarToggle<CR>
let g:tagbar_compact = 1
let g:tagbar_autofocus = 1
let g:tagbar_sort = 0
let g:tagbar_left = 1
let g:tagbar_type_tac = {
   \ 'ctagstype' : 'tacc',
   \ 'kinds'     : [
       \ 'd:definition'
   \ ],
   \ 'sort'    : 0
\ }

" vim-asterisk plugin
map <silent> *  <Plug>(asterisk-z*)
map <silent> #  <Plug>(asterisk-z#)
map <silent> g* <Plug>(asterisk-gz*)
map <silent> g# <Plug>(asterisk-gz#)

"" gv plugin
nnoremap <silent> <Leader>gv :GV --branches --tags --remotes<cr>
nnoremap <silent> <Leader>gv! :GV! --branches --tags --remotes<cr>

" Fugitive plugin
map <silent> <Leader>gs :Gstatus<cr>
map <Leader>ge :Gedit<space>
map <Leader>gd :Gdiff<space>
map <Leader>gc :Gcommit<space>
map <silent> <Leader>gb :Gblame<cr>

" Hugefile plugin
let g:hugefile_trigger_size = 50

" DirDiff plugin
" ignore white space in diff
let g:DirDiffAddArgs = "-w"

" Fzf
" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
command! -bang -nargs=* Rg
\ call fzf#vim#grep(
\   'rg --vimgrep --type-add "ar:*.{tac,tin,py,ar,am}" --type-add "tac:*.tac" --type-add "tin:*.tin" --no-ignore --color=always '.<q-args>, 1,
\   <bang>0 ? fzf#vim#with_preview('up:60%')
\           : fzf#vim#with_preview('right:50%:hidden', '?'),
\   <bang>0)
map <silent> <Leader>f :Files<cr>
map <silent> <Leader>b :Buffers<cr>
map <silent> <Leader>t :BTags<cr>
map <silent> <Leader>T :Tags<cr>
map <Leader>g :Rg<space>
map <Leader>l :BLines<cr>
map <silent> <Leader>h :Helptags<cr>
map <silent> <Leader>: :History:<cr>
map <silent> <Leader>s :History/<cr>

" vim-textobj-diff plugin
"let g:textobj_diff_no_default_key_mappings = 1
nmap <silent> ]df <Plug>(textobj-diff-file-n)
nmap <silent> [df <Plug>(textobj-diff-file-p)
nmap <silent> ]dh <Plug>(textobj-diff-hunk-n)
nmap <silent> [dh <Plug>(textobj-diff-hunk-p)

" vim-fswitch plugin
let g:fsnonewfiles = 'on'
autocmd vimrc BufEnter *.*tin let b:fswitchdst = 'tac' | let b:fswitchlocs = './'
autocmd vimrc BufEnter *.tac let b:fswitchdst = 'tin,itin' | let b:fswitchlocs = './'
nmap <silent> <Leader>of :FSHere<cr>

" arvim plugin
let a4_auto_edit = 0

" Lightline plugin
set noshowmode
let g:lightline = { 'colorscheme': 'solarized' }
