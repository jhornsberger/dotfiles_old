"set rtp+=/usr/share/vim/vimfiles/

" Plugins via Vim-Plug
call plug#begin()
Plug 'tpope/vim-sensible'
Plug 'tmhedberg/matchit'
Plug 'majutsushi/tagbar'
Plug 'haya14busa/vim-asterisk'
Plug 'rafi/awesome-vim-colorschemes'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-jdaddy'
Plug 'tpope/vim-surround'
Plug 'vim-scripts/DirDiff.vim'
"Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'kana/vim-textobj-user'
Plug 'bps/vim-textobj-python'
Plug 'kana/vim-textobj-diff'
Plug 'derekwyatt/vim-fswitch'
Plug 'tpope/vim-eunuch'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'git@gitlab.aristanetworks.com:jeff/vim-alog.git'
Plug 'git@gitlab.aristanetworks.com:the_third_man/arvim.git'
Plug 'itchyny/lightline.vim'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'google/vim-maktaba'
Plug 'google/vim-codefmt'
Plug 'google/vim-glaive'
Plug 'roxma/vim-tmux-clipboard'
Plug 'teranex/jk-jumps.vim'
Plug 'rbong/vim-flog'
Plug 'romainl/vim-qf'
Plug 'camspiers/lens.vim'
Plug 'frioux/vim-regedit'
call plug#end()

" Options for editing
set nocompatible
set shiftwidth=3
set tabstop=3
set linebreak
set cindent
set expandtab
set nospell
set virtualedit=all
set history=5000
set nojoinspaces

" Mouse support with tmux
set mouse=a
if &term =~ '^screen' && !has('nvim')
   " tmux knows the extended mouse mode
   " option was removed from Neovim
   if has("mouse_sgr")
      set ttymouse=sgr
   else
      set ttymouse=xterm2
   endif
endif

if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  " Uncomment to have 'bomb' on by default for new files.
  " Note, this will not apply to the first, empty buffer created at Vim startup.
  "setglobal bomb
  set fileencodings=ucs-bom,utf-8,latin1
endif

" Make splits appear as expected
set splitbelow
set splitright

" Options for setting the bottom 2 lines
set showmode

" UI stuff
set background=light
colorscheme flattened_light
set nocursorline
set visualbell
set ignorecase
set smartcase
set guioptions=aeir
set hidden
set hlsearch
set incsearch
set nowrapscan
set showcmd
set lazyredraw
set tags=tags;/
set path=**
set numberwidth=1
set timeoutlen=1000
set nofsync
set previewheight=20

if !has( "nvim" )
   set swapsync=
   set completeopt=menu,popup
endif

" Highlight cursor line only in current window
augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup END

if has("gui_running")
  if has("gui_win32")
    set guifont=Lucida_Console:h10:cDEFAULT
  endif
endif

" Options for folding
set foldmethod=syntax           "fdm:   fold by the indentation by default
set nofoldenable                "nofen: don't fold by default

" Options for backup files
set nobackup
set nowritebackup
if has('unix')
   set directory=/tmp
else
   set directory=$TEMP
endif

" define a group `vimrc` and initialize.
augroup vimrc
   autocmd!
augroup END

" Always equalize windows on resize
autocmd vimrc VimResized * wincmd =

" Options for vimdiff
set diffopt+=vertical,algorithm:histogram

" Automatically diffupdate on write
autocmd vimrc BufWritePost * if &diff == 1 | diffupdate | endif

" Always move some windows to the bottom
autocmd vimrc FileType qf wincmd J
"autocmd vimrc FileType gitcommit wincmd J

" Set textwidth for programming
autocmd vimrc FileType tac,cpp,python ++nested setlocal textwidth=85

autocmd vimrc FileType tac set nocindent | set smartindent

" Treat *.md files as markdown instead of Modula-2
autocmd vimrc BufNewFile,BufReadPost *.md set filetype=markdown
autocmd vimrc BufNewFile,BufReadPost *.md ++nested setlocal textwidth=0

" Special textwidth gitcommit
autocmd vimrc FileType gitcommit ++nested setlocal textwidth=72

" Treat *.*tin files as C++
autocmd vimrc BufNewFile,BufReadPost *.*tin set filetype=cpp

" Longer lines in go files
autocmd vimrc FileType go ++nested setlocal textwidth=100

" Set colorcolumn to match textwidth
autocmd vimrc OptionSet textwidth let &l:colorcolumn=&l:textwidth

" Mappings
let g:mapleader = "\<Space>"
map Y y$
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
nnoremap <silent><Leader>tc :tabclose<return>
nnoremap <Leader>tC :tabclose<space>
nnoremap <silent><Leader>tn :tabnew<return>
nnoremap <silent><Leader>to :tabonly<return>
nnoremap <Leader>te :tabedit<space>
nnoremap <Leader>tm :tabmove<space>
nnoremap <Leader>L :let &colorcolumn = &colorcolumn == '' ? '85' : ''<CR>
nnoremap <Leader>co :copen<return>
nnoremap <Leader>cc :cclose<return>
nnoremap j gj
nnoremap k gk
noremap <silent><Leader>// :let @/ = ""<CR>
nnoremap <Leader>ms :mksession! ~/.vim_session<CR>
nnoremap <Leader>ls :source ~/.vim_session<CR>
nnoremap <Leader>\| :vsp<cr>
nnoremap <Leader>- :sp<cr>
nnoremap <Leader>= <C-w>=
nnoremap <Leader>mh :vertical resize<cr>
nnoremap <Leader>mv :resize<cr>
nnoremap <Leader>ma :resize \| vertical resize<cr>
nnoremap <Leader>O :only<cr>
nnoremap <Leader>c :close<cr>
nnoremap <Leader>D :bp\|bd #<cr>
nnoremap <Leader>DC :bp\|bd #\|close<cr>
nnoremap <Leader>DD :bp!\|bd! #<cr>
nnoremap <Leader>DDC :bp!\|bd! #\|close<cr>
nnoremap <Leader>P :set paste!<cr>
nnoremap <Leader>C :call SetColours()<cr> " Fix colors when they get messed
nnoremap <Leader>R :redraw!<cr>
nnoremap <Leader>n :set relativenumber!<cr>
nnoremap <Leader>N :set number!<cr>
nnoremap <Leader>w :set wrap!<cr>
nnoremap <C-W><C-F> <C-W>vgf " Open file under cursor in vertical split
nnoremap <Leader>j :pedit +$ `job -g <cword>`<cr>
nnoremap <Leader>J :edit +$ `job -g <cword>`<cr>

" Terminal
if has( "nvim" )
   tnoremap <Esc><Esc> <C-\><C-n>
   tnoremap <silent><C-J> <Cmd>wincmd j<cr>
   tnoremap <silent><C-K> <Cmd>wincmd k<cr>
   tnoremap <silent><C-L> <Cmd>wincmd l<cr>
   tnoremap <silent><C-H> <Cmd>wincmd h<cr>
	tnoremap <expr> <C-r><C-r> '<C-\><C-N>"'.nr2char(getchar()).'pi'
   autocmd vimrc TermOpen * setlocal scrollback=100000
   autocmd vimrc TermOpen * nnoremap <buffer> <silent><cr> gi

   nnoremap <silent><Leader>tth :terminal<cr>
   nnoremap <silent><Leader>tts :split +terminal<cr>
   nnoremap <silent><Leader>ttv :vsplit +terminal<cr>
   nnoremap <silent><Leader>ttt :tabnew +terminal<cr>
   nnoremap <Leader>TTH :terminal<space>
   nnoremap <Leader>TTS :split +terminal<space>
   nnoremap <Leader>TTV :vsplit +terminal<space>
   nnoremap <Leader>TTT :tabnew +terminal<space>
elseif has( "terminal" )
   tnoremap <Esc><Esc> <C-W>N
   tnoremap <silent><C-J> <C-W>j
   tnoremap <silent><C-K> <C-W>k
   tnoremap <silent><C-L> <C-W>l
   tnoremap <silent><C-H> <C-W>h
   autocmd vimrc TerminalOpen * if &buftype == 'terminal' | nnoremap <buffer> <silent><cr> gi | endif
   set termwinscroll=100000

   " vim-tmux-focus-events plugin doesn't support terminal
   "tnoremap <silent> <F24> <Nop>
   "tnoremap <silent> <F25> <Nop>

   nnoremap <silent><Leader>tts :terminal<cr>
   nnoremap <silent><Leader>ttv :vertical terminal<cr>
   nnoremap <silent><Leader>tth :terminal ++curwin<cr>
   nnoremap <silent><Leader>ttt :tab terminal<cr>
   nnoremap <Leader>TTS :terminal<space>
   nnoremap <Leader>TTV :vertical terminal<space>
   nnoremap <Leader>TTH :terminal ++curwin<space>
   nnoremap <Leader>TTT :tab terminal<space>
endif


" Show hidden characters
nnoremap <silent><Leader>H :set list!<cr>

" netrw settings
let g:netrw_localrmdir='rm -r'
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_altv = 1
let g:netrw_winsize = 25
let g:netrw_browse_split = 2
let g:netrw_http_cmd="curl"
let g:netrw_http_xcmd="-L -o"

" Tagbar plugin
map <Leader>tb :TagbarToggle<CR>
let g:tagbar_compact = 1
let g:tagbar_autofocus = 1
let g:tagbar_sort = 0
let g:tagbar_position = 'leftabove vertical'
let g:tagbar_sort = 0
let g:tagbar_type_tac = {
   \ 'ctagstype' : 'tacc',
   \ 'kinds'     : [
       \ 'd:definition'
   \ ],
   \ 'sort'    : 0
\ }

" vim-asterisk plugin
map <silent> *  <Plug>(asterisk-z*)
map <silent> #  <Plug>(asterisk-z#)
map <silent> g* <Plug>(asterisk-gz*)
map <silent> g# <Plug>(asterisk-gz#)

" Fugitive plugin
map <Leader>gs :topleft vertical Git<cr>
map <Leader>ge :Gedit<space>
map <Leader>gd :Gdiffsplit<space>
map <Leader>ged :Gedit \| windo difft<cr>
map <Leader>gc :Git commit<space>
map <Leader>gb :Git blame<cr>
map <Leader>G :Git<space>

" DirDiff plugin
" ignore white space in diff
let g:DirDiffAddArgs = "-w"

" Fzf
let g:fzf_layout = { 'window': { 'width': 1, 'height': 0.4, 'yoffset': 1 } }
command! -bang -nargs=* -complete=file Rg
\ call fzf#vim#grep(
\   'rg --vimgrep '.<q-args>, 1,
\   <bang>0 ? fzf#vim#with_preview('up:60%')
\           : fzf#vim#with_preview('right:50%:hidden', '?'),
\   <bang>0)
map <Leader>f :Files<cr>
map <Leader>F :Files<space>
map <Leader>b :Buffers<cr>
map <Leader>bt :BTags<cr>
map <Leader>BT :BTags<space>
map <Leader>t :Tags<cr>
map <Leader>T :Tags<space>
map <Leader>W :Windows<cr>
map <Leader>g :Rg<space>
map <silent> <Leader>l :BLines<cr>
map <Leader>h :Helptags<cr>
map <Leader>: :History:<cr>
map <Leader>/ :History/<cr>

" vim-textobj-diff plugin
"let g:textobj_diff_no_default_key_mappings = 1
nmap <silent> ]df <Plug>(textobj-diff-file-n)
nmap <silent> [df <Plug>(textobj-diff-file-p)
nmap <silent> ]dh <Plug>(textobj-diff-hunk-n)
nmap <silent> [dh <Plug>(textobj-diff-hunk-p)

" vim-fswitch plugin
let g:fsnonewfiles = 'on'
autocmd vimrc BufEnter *.*tin let b:fswitchdst = 'tac' | let b:fswitchlocs = './'
autocmd vimrc BufEnter *.tac let b:fswitchdst = 'tin,itin' | let b:fswitchlocs = './'
nmap <silent> <Leader>of :FSHere<cr>

" arvim plugin
let a4_auto_edit = 0

" Lightline plugin
set noshowmode
let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ 'active': {
		\   'right': [ [ 'lineinfo' ],
		\              [ 'percent' ],
		\              [ 'gitbranch', 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead'
      \ },
      \ }

" vim-alog plugin
autocmd vimrc BufNewFile,BufReadPost *.log nnoremap <buffer> <Leader>al :set filetype=alog<cr>

" jk-jumps plugin
let g:jk_jumps_minimum_lines = 2

" Flog plugin
nnoremap <Leader>gl :Flog -date=local<cr>
nnoremap <Leader>glf :Flog -date=local -path=%<cr>
" I don't know why this doesn't work...
"let g:flog_default_arguments = { 'max-count': 1000 }

" vim-qf plugin
nmap <silent><c-p> <Plug>(qf_qf_previous)
nmap <silent><c-n> <Plug>(qf_qf_next)

" lens plugin
let g:lens#width_resize_max = 85
